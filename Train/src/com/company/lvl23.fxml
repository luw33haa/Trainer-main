<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.Pane?>
<?import javafx.scene.text.Font?>

<Pane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="780.0" prefWidth="1300.0" style="-fx-background-color: #FFE4B5;" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.company.Main">
    <children>
        <TextField editable="false" layoutX="564.0" layoutY="35.0" prefHeight="50.0" prefWidth="474.0" style="-fx-background-color: transperent;" text="3.Выберите код с правильно использованными Переменной Char">
            <font>
                <Font size="15.0" />
            </font>
        </TextField>
        <Button alignment="TOP_CENTER" layoutX="511.0" layoutY="85.0" mnemonicParsing="false" onAction="#lvl233" prefHeight="265.0" prefWidth="501.0" style="-fx-background-color: #F0F8FF;" text="import java.io.*;&#10;public class TestByteStream {&#10;   public static void main(String args[])throws IOException {&#10;      // Запись строки в файл в кодировке UTF-8&#10;      DataOutputStream dataOutput = new DataOutputStream(new &#10;FileOutputStream(&quot;E:\\test.txt&quot;));&#10;      dataOutput.writeUTF(&quot;proglang.su&quot;);&#10;      // Чтение данных из того же файла&#10;      DataInputStream dataInput = new DataInputStream(new FileInputStream(&quot;E:\\test.txt&quot;));&#10;     while(dataInput.available() &gt; 0) {&#10;         String a = dataInput.readUTF();&#10;         System.out.print(a);&#10;      }&#10;   }&#10;}" />
        <Button layoutX="511.0" layoutY="378.0" mnemonicParsing="false" onAction="#lvl2333" prefHeight="265.0" prefWidth="501.0" style="-fx-background-color: #F0F8FF;" text="importjava.io.*;&#10;publicclassOutputExample{&#10;publicstaticvoidmain(String[]args)throwsIOException{&#10;FileOutputStreamfile=newFileOutputStream(D:\\testout.txt);&#10;data.writeInt(65);&#10;data.flush();&#10;data.close();&#10;System.out.println(&quot;Succcess...&quot;);&#10;}&#10;}" />
        <TextArea layoutX="10.0" layoutY="10.0" prefHeight="750.0" prefWidth="490.0" text="Запись данных и DataOutputStream&#10;Класс DataOutputStream представляет поток вывода и предназначен для записи данных &#10;примитивных типов, таких, как int, double и т.д. Для записи каждого из примитивных &#10;типов предназначен свой метод:&#10;writeBoolean(boolean v): записывает в поток булевое однобайтовое значение&#10;writeByte(int v): записывает в поток 1 байт, которые представлен в виде &#10;целочисленного значения&#10;writeChar(int v): записывает 2-байтовое значение char&#10;writeDouble(double v): записывает в поток 8-байтовое значение double&#10;writeFloat(float v): записывает в поток 4-байтовое значение float&#10;writeInt(int v): записывает в поток целочисленное значение int&#10;writeLong(long v): записывает в поток значение long&#10;writeShort(int v): записывает в поток значение short&#10;writeUTF(String str): записывает в поток строку в кодировке UTF-8&#10;Считывание данных и DataInputStream&#10;Класс DataInputStream действует противоположным образом - он считывает из потока &#10;данные примитивных типов. Соответственно для каждого примитивного типа определен &#10;свой метод для считывания:&#10;boolean readBoolean(): считывает из потока булевое однобайтовое значение&#10;byte readByte(): считывает из потока 1 байт&#10;char readChar(): считывает из потока значение char&#10;double readDouble(): считывает из потока 8-байтовое значение double&#10;float readFloat(): считывает из потока 4-байтовое значение float&#10;int readInt(): считывает из потока целочисленное значение int&#10;long readLong(): считывает из потока значение long&#10;short readShort(): считывает значение short&#10;String readUTF(): считывает из потока строку в кодировке UTF-8&#10;int skipBytes(int n): пропускает при чтении из потока n байтов&#10;Рассмотрим применение классов на примере:&#10;&#9;import java.io.*;&#10;public class Program {&#10;public static void main(String[] args) {&#10;Person tom = new Person(&quot;Tom&quot;, 34, 1.68, false);&#10;// запись в файл&#10;try(DataOutputStream dos = new DataOutputStream(new FileOutputStream(&quot;data.bin&quot;))){&#10;// записываем значения&#10;dos.writeUTF(tom.name);&#10;dos.writeInt(tom.age);&#10;dos.writeDouble(tom.height);&#10;dos.writeBoolean(tom.married);&#10;System.out.println(&quot;File has been written&quot;);}&#10;catch(IOException ex){&#10;System.out.println(ex.getMessage());} &#10;// обратное считывание из файла&#10;&#9;try(DataInputStream dos = new DataInputStream(new FileInputStream(&quot;data.bin&quot;))){&#10;// записываем значения&#10;String name = dos.readUTF();&#10;int age = dos.readInt();&#10;double height = dos.readDouble();&#10;boolean married = dos.readBoolean();&#10;System.out.printf(&quot;Name: %s Age: %d Height: %f Married: %b&quot;, &#10;name, age, height, married);}&#10;catch(IOException ex){&#10;System.out.println(ex.getMessage());&#10;} } }&#10;Здесь мы последовательно записываем в файл данные объекта Person.&#10;Объект DataOutputStream в конструкторе принимает поток вывода:DataOutputStream &#10;(OutputStream out). В данном случае в качестве потока вывода используется &#10;объектFileOutputStream, поэтому вывод будет происходить в файл. И с помощью выше &#10;рассмотренных методов типаwriteUTF()производится запись значений в бинарный файл.&#10;Затем происходит чтение ранее записанных данных. Объект DataInputStream в &#10;конструкторе принимает поток для чтения:DataInputStream(InputStream in). Здесь &#10;таким потоком выступает объектFileInputStream" />
    </children>
</Pane>
