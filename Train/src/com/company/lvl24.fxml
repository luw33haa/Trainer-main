<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.Pane?>
<?import javafx.scene.text.Font?>

<Pane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="780.0" prefWidth="1300.0" style="-fx-background-color: #FFE4B5;" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.company.Main">
    <children>
        <TextField editable="false" layoutX="545.0" layoutY="14.0" prefHeight="50.0" prefWidth="474.0" style="-fx-background-color: transperent;" text="4.Выберите код с правильно использованными Переменной Char">
            <font>
                <Font size="15.0" />
            </font>
        </TextField>
        <Button alignment="TOP_CENTER" layoutX="511.0" layoutY="85.0" mnemonicParsing="false" onAction="#lvl244" prefHeight="241.0" prefWidth="430.0" style="-fx-background-color: #F0F8FF;" text="public class HelloWorld {&#10;&#10;    public static void main(String []args) {&#10;        System.out.println(getHelloMessage());&#10;    }&#10;&#10;    public static String getHelloMessage() {&#10;        return &quot;Hello World&quot;;&#10;    }&#10;&#10;}&#10;">
            <font>
                <Font size="13.0" />
            </font></Button>
        <Button layoutX="511.0" layoutY="355.0" mnemonicParsing="false" onAction="#lvl2444" prefHeight="241.0" prefWidth="430.0" style="-fx-background-color: #F0F8FF;" text="public class HelloWorld {&#10;&#10;    public static void main(String []args) {&#10;        System.out.println(getHelloMessage());&#10;    }&#10;&#10;    public static String getHelloMessage() {&#10;        &quot;Hello World&quot;;&#10;    }&#10;&#10;}&#10;">
            <font>
                <Font size="13.0" />
            </font></Button>
        <TextArea editable="false" layoutX="10.0" layoutY="10.0" prefHeight="750.0" prefWidth="490.0" text="Методы могут возвращать некоторое значение. Для этого применяется&#10; оператор return.&#10;&#9;return возвращаемое_значение;&#10;После оператора return указывается возвращаемое значение,&#10; которое является результатом &#10;метода. Это может быть литеральное значение, значение&#10; переменной или какого-то &#10;сложного выражения.&#10;Например:&#10;&#9;public class Program{&#10;public static void main (String args[]){&#10;int x = sum(1, 2, 3);&#10;int y = sum(1, 4, 9);&#10;System.out.println(x); // 6&#10;System.out.println(y); // 14&#10;}&#10;static int sum(int a, int b, int c){&#10;return a + b + c;&#10;}&#10;}&#10;В методе в качестве типа возвращаемого значения вместо void &#10;используется любой &#10;другой тип. В данном случае метод sum возвращает значение типа int, &#10;поэтому этот тип &#10;указывается перед названием метода. Причем если в качестве &#10;возвращаемого типа для &#10;метода определен любой другой, отличный от void, то метод &#10;обязательно должен &#10;использовать операторreturnдля возвращения значения.&#10;При этом возвращаемое значение всегда должно иметь тот же тип,&#10; что значится в определении функции.&#10; И если функция возвращает значение типа int,&#10; то после оператора &#10;return стоит целочисленное значение, которое является объектом типа int. &#10;Как в данном &#10;случае это сумма значений параметров метода.&#10;Метод может использовать несколько вызовов оператора return для &#10;возваращения разных &#10;значений в зависимости от некоторых условий:" />
    </children>
</Pane>
