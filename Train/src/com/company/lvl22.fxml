<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.Pane?>
<?import javafx.scene.text.Font?>

<Pane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="780.0" prefWidth="1300.0" style="-fx-background-color: #FFE4B5;" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.company.Main">
    <children>
        <TextField editable="false" layoutX="564.0" layoutY="35.0" prefHeight="50.0" prefWidth="474.0" style="-fx-background-color: transperent;" text="2.Выберите код с правильно использованными Переменной Char">
            <font>
                <Font size="15.0" />
            </font>
        </TextField>
        <Button alignment="TOP_CENTER" layoutX="511.0" layoutY="85.0" mnemonicParsing="false" onAction="#lvl222" prefHeight="241.0" prefWidth="608.0" style="-fx-background-color: #F0F8FF;" text="public class Main {&#10;   public static void main(String[] args) throws IOException {&#10;       FileInputStream fileInputStream = new FileInputStream(&quot;C:\\Users\\Username\\Desktop\\test.txt&quot;);&#10;       int i;&#10;       while((i=fileInputStream.read())!= -1){&#10;           System.out.print((char)i);&#10;       }&#10;   } ">
            <font>
                <Font size="13.0" />
            </font></Button>
        <Button layoutX="511.0" layoutY="355.0" mnemonicParsing="false" onAction="#lvl2222" prefHeight="292.0" prefWidth="608.0" style="-fx-background-color: #F0F8FF;" text="public class Main {&#10;&#10;   public static void main(String[] args) throws IOException {&#10;&#10;&#10;       File file = new &#10;&#10;       String greetings = &quot;Привет! Добро пожаловать в JavaRush –лучший тренажёр, &#10;кто хочет стать программистом!&quot;;&#10;&#10;       fileOutputStream.write(greetings.getBytes());&#10;&#10;       fileOutputStream.close();&#10;   }&#10;}">
            <font>
                <Font size="13.0" />
            </font></Button>
        <TextArea editable="false" layoutX="10.0" layoutY="10.0" prefHeight="750.0" prefWidth="490.0" text="Чтение файлов и класс FileInputStream&#10;Для считывания данных из файла предназначен классFileInputStream,&#10; который является &#10;наследником класса InputStream и поэтому реализует все его методы.&#10;Для создания объекта FileInputStream мы можем использовать ряд&#10; конструкторов. &#10;Наиболее используемая версия конструктора в качестве параметра &#10;принимает путь к &#10;считываемому файлу:&#10;&#9;FileInputStream(String fileName) throws FileNotFoundException&#10;Если файл не может быть открыт, например, по указанному пути такого&#10; файла не &#10;существует, то генерируется исключениеFileNotFoundException.&#10;Считаем данные из ранее записанного файла и выведем на консоль:&#10;&#9;import java.io.*;&#10;public class Program {&#10;public static void main(String[] args) {&#10;try(FileInputStream fin=new FileInputStream(&quot;notes.txt&quot;))&#10;{ &#10;int i;&#10;while((i=fin.read())!=-1){&#10;System.out.print((char)i);&#10;} &#10;}&#10;catch(IOException ex){&#10;System.out.println(ex.getMessage());&#10;} &#10;}&#10;}&#10;В данном случае мы считываем каждый отдельный байт в переменную i:&#10;&#9;while((i=fin.read())!=-1){&#10;Когда в потоке больше нет данных для чтения, метод возвращает число -1.&#10;Затем каждый считанный байт конвертируется в объект типа char и выводится&#10; на консоль.&#10;Подобным образом можно считать данные в массив байтов и затем &#10;производить с ним &#10;манипуляции:&#10;В данном случае с помощью методаread()считываем данные в массив buffer&#10; длиной 256 &#10;байтов. Метод возвращает количество считанных байтов.&#10;Поскольк файл может быть больше 256 байтов, то считываем в цикле while&#10; до конца файла. Когда больше не останется&#10; файлов для считывания, то метод возвратит -1.&#10;&#9;while((count=fin.read(buffer))!=-1){&#10;Поскольку количество считанных байтов/размер файла могут быть меньше&#10; 256 байт, то реальное количество считанных байт&#10; сохраняем в переменную count. &#10;Затем выводим считанное количество данных на консоль в цикле for.&#10;&#9;for(int i=0; i&lt;count;i++){&#10;System.out.print((char)buffer[i]);&#10;}&#10;Классы FileInputStream и FileOutputStream предназначены прежде всего&#10; для записи  двоичных файлов, то есть для записи и чтения байтов. И хотя они также&#10; могут &#10;использоваться для работы с текстовыми файлами, но все же для этой&#10; задачи больше &#10;подходят другие классы." />
    </children>
</Pane>
